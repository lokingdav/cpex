x-cpex-service: &cpex-service
  image: cpex
  platform: linux/x86_64
  volumes:
    - '.:/app'
  depends_on:
    - cache
  networks:
    - net

services:
  experiment:
    <<: *cpex-service
    container_name: cpex-exp
    command: tail -f /dev/null
    environment:
      - DOCKER_SOCKET_PATH=${DOCKER_SOCKET_PATH:-/var/run/docker.sock}
      - HOST_APP_PATH=${HOST_APP_PATH}
    volumes:
      - '.:/app'
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock

  automation:
    image: cpex-automation
    container_name: cpex-automation
    command: tail -f /dev/null
    volumes:
      - './automation:/manager'
      - './docker/data/automation/.aws:/root/.aws'
      - './docker/data/automation/.ssh:/root/.ssh'

  evaluator:
    <<: *cpex-service
    container_name: cpex-ev
    command: > 
      gunicorn cpex.servers.evaluator:app 
      --bind 0.0.0.0:80 
      --workers 4 
      --worker-class uvicorn.workers.UvicornWorker 
      --reload

  message-store:
    <<: *cpex-service
    container_name: cpex-ms
    command: >
      gunicorn cpex.servers.message_store:app 
      --bind 0.0.0.0:80 
      --workers 4 
      --worker-class uvicorn.workers.UvicornWorker 
      --reload

# Cache and Database
  cache:
    container_name: cpex-cache
    image: redis
    platform: linux/x86_64
    ports:
      - 6379:6379
    networks:
      - net
  
  mongo:
    container_name: cpex-mongo
    image: mongo
    platform: linux/x86_64
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: secret
    ports:
      - 27017:27017
    volumes:
      - ./docker/data/mongo:/data/db
    networks:
      - net

networks:
  net:
    driver: bridge
x-cpex-service: &cpex-service
  image: kofidahmed/cpex
  platform: linux/x86_64
  volumes:
    - '.:/app'
  depends_on:
    - cache
  networks:
    - net

services:
  experiment:
    image: cpex-experiment
    platform: linux/x86_64
    container_name: cpex-exp
    command: tail -f /dev/null
    environment:
      - DOCKER_SOCKET_PATH=${DOCKER_SOCKET_PATH:-/var/run/docker.sock}
      - HOST_APP_PATH=${HOST_APP_PATH}
    volumes:
      - '.:/app'
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock
      - './docker/data/automation/.aws:/root/.aws'
      - './docker/data/automation/.ssh:/root/.ssh'
    depends_on:
      - cache
      - mongo
    networks:
      - net
    profiles: [experiment]

# CPeX Services
  evaluator:
    <<: *cpex-service
    container_name: evaluator
    command: > 
      gunicorn cpex.servers.evaluator:app 
      --bind 0.0.0.0:80 
      --workers 4
      --worker-class uvicorn.workers.UvicornWorker 
      --log-file=-
      --keep-alive 60
      --timeout 120
    ports:
      - 10430:80
    profiles: [cpex, ev]
    depends_on:
      - ev-keyrotation
      - cache

  ev-keyrotation:
    <<: *cpex-service
    container_name: ev-keyrotation
    command: python cpex/servers/keyrotation.py
    profiles: [cpex, ev]

  message-store:
    <<: *cpex-service
    container_name: message-store
    command: >
      gunicorn cpex.servers.message_store:app 
      --bind 0.0.0.0:80 
      --workers 4
      --worker-class uvicorn.workers.UvicornWorker 
      --log-file=-
      --keep-alive 60
      --timeout 120
    ports:
      - 10431:80
    profiles: [cpex, ms]

  jodi-proxy:
    <<: *cpex-service
    container_name: jodi-proxy
    command: >
      gunicorn cpex.servers.cpex_proxy:app 
      --bind 0.0.0.0:80 
      --workers 8
      --worker-class uvicorn.workers.UvicornWorker 
      --log-file=-
      --keep-alive 60
    profiles: [jodi_proxy]

  sti-cr:
    <<: *cpex-service
    container_name: sti-cr
    command: > 
      gunicorn cpex.prototype.stirshaken.cert_repo:app 
      --bind 0.0.0.0:80 
      --workers 2
      --worker-class uvicorn.workers.UvicornWorker 
      --log-file=-
      --keep-alive 60
      --timeout 120
    ports:
      - 10432:80
    environment:
      - NODE_PORT=10432
    profiles: [atis, cr]

  sti-cps:
    <<: *cpex-service
    container_name: sti-cps
    command: > 
      gunicorn cpex.prototype.stirshaken.cps_server:app 
      --bind 0.0.0.0:80 
      --workers 6
      --worker-class uvicorn.workers.UvicornWorker 
      --log-file=-
      --keep-alive 60
      --timeout 120
    ports:
      - 10433:80
    environment:
      - NODE_PORT=10433
    depends_on:
      cache:
        condition: service_healthy
    profiles: [atis, cps]

  oobss-proxy:
    <<: *cpex-service
    container_name: oobss-proxy
    command: >
      gunicorn cpex.prototype.stirshaken.oobss_proxy:app 
      --bind 0.0.0.0:80 
      --workers 8
      --worker-class uvicorn.workers.UvicornWorker 
      --log-file=-
      --keep-alive 60
    profiles: [oobss_proxy]

# Cache and Database
  cache:
    container_name: cache
    image: redis
    platform: linux/x86_64
    networks:
      - net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
  
  mongo:
    container_name: cpex-mongo
    image: mongo
    platform: linux/x86_64
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: secret
    ports:
      - 27017:27017
    volumes:
      - ./docker/data/mongo:/data/db
    networks:
      - net
    profiles: [experiment]

networks:
  net:
    driver: bridge
